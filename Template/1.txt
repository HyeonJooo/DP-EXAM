탬플릿패턴

커피 만들기 : boilwater -> brew-> pourIncup ->add sugar
차 만들기 : boilwater -> steepTea ->pourIncup->add lemon

위 두개를 보면 1,3과정은 같지만 2,4과정에서 약간의 차이가 존재한다.

파사드패턴처럼 커피와 차는 위 과정들을 담당하는 메소드가 존재하고 이를 한번에 실행하는 메소드가 존재하는데 이를 커피와 차, 따로 구현할 필요없이
공통적인 작업(1,3)이 구현된 클래스를 만들고 비슷하지만 다른 작업(2,4)이 구현된 클래스에서 이를 상속받아 2,4를 오버라이딩한다. 이때 부모클래스는 1,2,3,4를 한번에 수행하는 메소드가 있고 2,4단계를 각각 같은이름을 갖는 하나의 추상메소드로 선언한다.

이를 예제로 보면

tea와 coffee객체가 하나씩 생성되고 
tea.prepareRecipe(); coffee.prepareRecipe(); 메소드를 통해 각 객체의  1,2,3,4단계가 수행된다. 이때 1,3단계는 부모클래스에서 이미 구현되어 수행되고 2,4는 부모클래스를 상속받는 각 클래스(tea, coffee)에서 오버라이딩되어 실행된다.



hook
위의 탬플릿패턴은 무조건 고정된 개수만큼 단계를 거친다. 커피와 차 모두 1,2,3,4단계를 거치며 이보다 적거나 많을 수가 없다.
hook은 간단한 boolean조건문을 통해 특정한 단계를 수행하거나 할수 없게 만들어 두 클래스가 고정된 절차 수를 가지지 않고 더 적거나 더 많게 구현할수 있다.
 
 