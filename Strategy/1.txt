스트레티지패턴
어떤 동작을 하는 로직을 정의하고 이것들을 하나로 묶음(캡슐화) 로직을 사용하는 객체들은 자기가 원하는대로 수정가능

오리 예제
오리 아래에 여러 종류가 있다.(mallad, modelduck)
이들이 가지고있는 행위는 날기(fly), 울기(quack), 수영(swim), display가 있고 오리의 종류가 달라도 전부 같은 행동인 수영을 제외하면
날기,울기는 각 오리마다 방식이 다름. mallardduck(청둥오리)는 날개로 날고 modelduck(모형오리?)는 날수없다(flynoway)
청둥오리는 울때(quack) 그냥 울고 모형오리도 그냥 운다고 치자(quack), 모형오리가 왜 그냥우는지 모르겠음
+display는 각 오리마다 자신의 이름을 출력해주는거기 때문에 각 오리 클래스마다 한개씩 존재함

각 오리클래스의 상위클래스인 duck은 flybehavior, quackbehavior, 아무것도없는 생성자, fb, qb를 설정하는 set메소드와 fly와 quack을 실행시켜주는 perform메소드, 그리고 무슨 오리인지 출력해주는 display(각 오리마다 따로 오버라이딩되있으므로 추상클래스), 모든 오리의 공통 행동인 swim메소드로 구성되어있다. 
여기서 모든 오리가 수행하지만 [종류마다 다른 동작을 하는 fly와 quack을 인터페이스로 캡슐화하여 fb, qb를 implemet하는 클래스를 통해 각 behavior에 있는 fly/quack을 오버라이딩 해준다] ==스트레티지패턴의 핵심

예를들어 불꽃오리를 새로 만들고싶다면,
duck을 상속받는 불꽃오리 클래스를 만들고
flybehavior인터페이스를 implement하는 flywithfire클래스를 만들고 quackbehovior implement하는 firequack 클래스를 만들면 된다. 이를 통해 기존 코드의 수정 없이 새로운코드를 생성하는 것으로 로직을 효율적으로 수정할 수 있다. 